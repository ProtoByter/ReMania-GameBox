import os
import sys

root = ""

try:
    root = sys.argv[2]
except IndexError:
    root = "."

API = sys.argv[1]

_, _, filenames = next(os.walk(os.path.join(root, "src/RMGB/Shaders", API)))

with open(os.path.join(root,f"include/RMGB/Graphics/backends/shaders-{API}.hpp"),"w+") as shader_file:
    shader_file.write(f"""
#ifndef RMGB_{API}_SHADERS
#define RMGB_{API}_SHADERS

#include <Graphics/graphics.hpp>
#include <array>

// This file is generated by generate_shader_files.py, so don't edit this directly

namespace RMGB::Graphics::{API} {{
\tstd::array Shaders{{
        """)
    for f in filenames:
        with open(os.path.join(root, "src/RMGB/Shaders", API, f)) as file:
            shader_file.write('\n\t\tShader(')
            if "vert" in f:
                shader_file.write('\n\t\t\t"#type vertex"\n')
            elif "frag" in f:
                shader_file.write('\n\t\t\t"#type fragment"\n')
            lines = file.read().split("\n")
            i = 0
            for line in lines:
                if i != len(lines)-1:
                    shader_file.write(f'\t\t\t"{line}"\n')
                else:
                    shader_file.write(f'\t\t\t"{line}"\n\t\t),')
                i += 1

    shader_file.write('\t};\n}\n\n#endif')


